/* ###################################################################
**     This component module is generated by Processor Expert. Do not modify it.
**     Filename    : hsm1.h
**     Project     : sec_eth_mpc5748g
**     Processor   : MPC5748G_176
**     Component   : hsm
**     Version     : Component SDK_S32_PA_15, Driver 01.00, CPU db: 3.00.000
**     Repository  : SDK_S32_PA_15
**     Compiler    : GNU C Compiler
**     Date/Time   : 2020-10-28, 23:42, # CodeGen: 7
**     Contents    :
**         HSM_DRV_Init                    - status_t HSM_DRV_Init(hsm_state_t * state);
**         HSM_DRV_Deinit                  - status_t HSM_DRV_Deinit(void);
**         HSM_DRV_EncryptECB              - status_t HSM_DRV_EncryptECB(hsm_key_id_t keyId,const uint8_t *...
**         HSM_DRV_EncryptECBAsync         - status_t HSM_DRV_EncryptECBAsync(hsm_key_id_t keyId,const uint8_t *...
**         HSM_DRV_DecryptECB              - status_t HSM_DRV_DecryptECB(hsm_key_id_t keyId,const uint8_t *...
**         HSM_DRV_DecryptECBAsync         - status_t HSM_DRV_DecryptECBAsync(hsm_key_id_t keyId,const uint8_t *...
**         HSM_DRV_EncryptCBC              - status_t HSM_DRV_EncryptCBC(hsm_key_id_t keyId,const uint8_t *...
**         HSM_DRV_EncryptCBCAsync         - status_t HSM_DRV_EncryptCBCAsync(hsm_key_id_t keyId,const uint8_t *...
**         HSM_DRV_DecryptCBC              - status_t HSM_DRV_DecryptCBC(hsm_key_id_t keyId,const uint8_t *...
**         HSM_DRV_DecryptCBCAsync         - status_t HSM_DRV_DecryptCBCAsync(hsm_key_id_t keyId,const uint8_t *...
**         HSM_DRV_GenerateMAC             - status_t HSM_DRV_GenerateMAC(hsm_key_id_t keyId,const uint8_t * msg,uint32_t...
**         HSM_DRV_GenerateMACAsync        - status_t HSM_DRV_GenerateMACAsync(hsm_key_id_t keyId,const uint8_t *...
**         HSM_DRV_VerifyMAC               - status_t HSM_DRV_VerifyMAC(hsm_key_id_t keyId,const uint8_t * msg,uint32_t...
**         HSM_DRV_VerifyMACAsync          - status_t HSM_DRV_VerifyMACAsync(hsm_key_id_t keyId,const uint8_t *...
**         HSM_DRV_LoadKey                 - status_t HSM_DRV_LoadKey(hsm_key_id_t keyId,const uint8_t * m1,const uint8_t...
**         HSM_DRV_LoadPlainKey            - status_t HSM_DRV_LoadPlainKey(const uint8_t * plainKey, uint32_t timeout);
**         HSM_DRV_ExportRAMKey            - status_t HSM_DRV_ExportRAMKey(uint8_t * m1,uint8_t * m2,uint8_t * m3,uint8_t...
**         HSM_DRV_InitRNG                 - status_t HSM_DRV_InitRNG(uint32_t timeout);
**         HSM_DRV_ExtendSeed              - status_t HSM_DRV_ExtendSeed(const uint8_t * entropy, uint32_t timeout);
**         HSM_DRV_InstallCallback         - security_callback_t HSM_DRV_InstallCallback(security_callback_t...
**         HSM_DRV_GenerateRND             - status_t HSM_DRV_GenerateRND(uint8_t *rnd, uint32_t timeout);
**         HSM_DRV_GetID                   - status_t HSM_DRV_GetID(const uint8_t * challenge,uint8_t * uid,uint8_t *...
**         HSM_DRV_GenerateTRND            - status_t HSM_DRV_GenerateTRND(uint8_t *trnd, uint32_t timeout);
**         HSM_DRV_SecureBoot              - status_t HSM_DRV_SecureBoot(uint32_t bootImageSize, const uint8_t...
**         HSM_DRV_BootFailure             - status_t HSM_DRV_BootFailure(uint32_t timeout);
**         HSM_DRV_BootOK                  - status_t HSM_DRV_BootOK(uint32_t timeout);
**         HSM_DRV_DbgChal                 - status_t HSM_DRV_DbgChal(uint8_t *challenge, uint32_t timeout);
**         HSM_DRV_DbgAuth                 - status_t HSM_DRV_DbgAuth(const uint8_t *authorization, uint32_t timeout);
**         HSM_DRV_MPCompress              - status_t HSM_DRV_MPCompress(const uint8_t *msg, uint16_t msgLen, uint8_t...
**         HSM_DRV_GetAsyncCmdStatus       - status_t HSM_DRV_GetAsyncCmdStatus(void);
**         HSM_DRV_CancelCommand           - status_t HSM_DRV_CancelCommand(void);
**         HSM_DRV_EncryptGCM              - status_t HSM_DRV_EncryptGCM(hsm_key_id_t keyId, uint32_t ivLen, const uint8_t...
**         HSM_DRV_DecryptGCM              - status_t HSM_DRV_DecryptGCM(hsm_key_id_t keyId, uint32_t ivLen, const uint8_t...
**         HSM_DRV_EncryptGCMAsync         - status_t HSM_DRV_EncryptGCMAsync(hsm_key_id_t keyId, uint32_t ivLen, const...
**         HSM_DRV_DecryptGCMAsync         - status_t HSM_DRV_DecryptGCMAsync(hsm_key_id_t keyId, uint32_t ivLen, const...
**         HSM_DRV_EncryptCCM              - status_t HSM_DRV_EncryptCCM(hsm_key_id_t keyId, uint32_t ivLen, const uint8_t...
**         HSM_DRV_DecryptCCM              - status_t HSM_DRV_DecryptCCM(hsm_key_id_t keyId, uint32_t ivLen, const uint8_t...
**         HSM_DRV_EncryptCCMAsync         - status_t HSM_DRV_EncryptCCMAsync(hsm_key_id_t keyId, uint32_t ivLen, const...
**         HSM_DRV_DecryptCCMAsync         - status_t HSM_DRV_DecryptCCMAsync(hsm_key_id_t keyId, uint32_t ivLen, const...
**         HSM_DRV_EncryptOFB              - status_t HSM_DRV_EncryptOFB(hsm_key_id_t keyId, const uint8_t *iv, uint32_t...
**         HSM_DRV_DecryptOFB              - status_t HSM_DRV_DecryptOFB(hsm_key_id_t keyId, const uint8_t *iv, uint32_t...
**         HSM_DRV_EncryptOFBAsync         - status_t HSM_DRV_EncryptOFBAsync(hsm_key_id_t keyId, const uint8_t *iv,...
**         HSM_DRV_DecryptOFBAsync         - status_t HSM_DRV_DecryptOFBAsync(hsm_key_id_t keyId, const uint8_t *iv,...
**         HSM_DRV_EncryptCTR              - status_t HSM_DRV_EncryptCTR(hsm_key_id_t keyId, const uint8_t *iv, uint32_t...
**         HSM_DRV_DecryptCTR              - status_t HSM_DRV_DecryptCTR(hsm_key_id_t keyId, const uint8_t *iv, uint32_t...
**         HSM_DRV_EncryptCTRAsync         - status_t HSM_DRV_EncryptCTRAsync(hsm_key_id_t keyId, const uint8_t *iv,...
**         HSM_DRV_DecryptCTRAsync         - status_t HSM_DRV_DecryptCTRAsync(hsm_key_id_t keyId, const uint8_t *iv,...
**         HSM_DRV_EncryptCFB              - status_t HSM_DRV_EncryptCFB(hsm_key_id_t keyId, const uint8_t *iv, uint32_t...
**         HSM_DRV_DecryptCFB              - status_t HSM_DRV_DecryptCFB(hsm_key_id_t keyId, const uint8_t *iv, uint32_t...
**         HSM_DRV_EncryptCFBAsync         - status_t HSM_DRV_EncryptCFBAsync(hsm_key_id_t keyId, const uint8_t *iv,...
**         HSM_DRV_DecryptCFBAsync         - status_t HSM_DRV_DecryptCFBAsync(hsm_key_id_t keyId, const uint8_t *iv,...
**         HSM_DRV_EncryptXTS              - status_t HSM_DRV_EncryptXTS(hsm_key_id_t keyId1, hsm_key_id_t keyId2, const...
**         HSM_DRV_DecryptXTS              - status_t HSM_DRV_DecryptXTS(hsm_key_id_t keyId1, hsm_key_id_t keyId2, const...
**         HSM_DRV_EncryptXTSAsync         - status_t HSM_DRV_EncryptXTSAsync(hsm_key_id_t keyId1, hsm_key_id_t keyId2,...
**         HSM_DRV_DecryptXTSAsync         - status_t HSM_DRV_DecryptXTSAsync(hsm_key_id_t keyId1, hsm_key_id_t keyId2,...
**         HSM_DRV_RsaEncrypt              - status_t HSM_DRV_RsaEncrypt(hsm_key_mode_t keyMode, uint32_t keyAddr,...
**         HSM_DRV_RsaEncryptAsync         - status_t HSM_DRV_RsaEncryptAsync(hsm_key_mode_t keyMode, uint32_t keyAddr,...
**         HSM_DRV_PseudoRandomTLS         - status_t HSM_DRV_PseudoRandomTLS(hsm_key_id_t keyId, uint32_t masterSeedLen,...
**         HSM_DRV_ExportExtendedRamKeys   - status_t HSM_DRV_ExportExtendedRamKeys(hsm_key_id_t keyId, const...
**         HSM_DRV_GenerateExtendedRamKeys - status_t HSM_DRV_GenerateExtendedRamKeys(hsm_key_id_t keyId, hsm_kdf_t...
**         HSM_DRV_ComputeSharedSecret     - status_t HSM_DRV_ComputeSharedSecret(hsm_key_id_t keyId, uint32_t keyLen,...
**         HSM_DRV_InstallCertificate      - status_t HSM_DRV_InstallCertificate(hsm_key_id_t keyId, hsm_key_id_t...
**         HSM_DRV_RsaVerifyHash           - status_t HSM_DRV_RsaVerifyHash(hsm_key_mode_t keyMode, uint32_t key,...
**         HSM_DRV_RsaVerifyMsg            - status_t HSM_DRV_RsaVerifyMsg(hsm_key_mode_t keyMode, uint32_t key,...
**         HSM_DRV_HashSHA256              - status_t HSM_DRV_HashSHA256(uint32_t msgLen, const uint8_t *msg, uint8_t...
**         HSM_DRV_HashHMAC256             - status_t HSM_DRV_HashHMAC256(hsm_key_id_t keyId, uint32_t msgLen, const...
**         HSM_DRV_EraseExtededRamKey      - status_t HSM_DRV_EraseExtededRamKey(hsm_key_id_t keyId, uint32_t timeout);
**         HSM_DRV_GetFwVersion            - status_t HSM_DRV_GetFwVersion(hsm_key_id_t keyId, uint32_t timeout);
**
**     Copyright 1997 - 2015 Freescale Semiconductor, Inc. 
**     Copyright 2016-2017 NXP 
**     All Rights Reserved.
**     
**     THIS SOFTWARE IS PROVIDED BY NXP "AS IS" AND ANY EXPRESSED OR
**     IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
**     OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
**     IN NO EVENT SHALL NXP OR ITS CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
**     INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
**     (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
**     SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)
**     HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT,
**     STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING
**     IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF
**     THE POSSIBILITY OF SUCH DAMAGE.
** ###################################################################*/
/*!
** @file hsm1.h
** @version 01.00
*/         
/*!
**  @addtogroup hsm1_module hsm1 module documentation
**  @{
*/         
#ifndef hsm1_H
#define hsm1_H
/* MODULE hsm1. */

/* Include inherited beans */
#include "Cpu.h"

/*! @brief Driver state structure which holds driver runtime data */
extern hsm_state_t hsm1_State;

#endif
/* ifndef hsm1_H */

/*!
** @}
*/
/*
** ###################################################################
**
**     This file was created by Processor Expert 10.1 [05.21]
**     for the NXP C55 series of microcontrollers.
**
** ###################################################################
*/
